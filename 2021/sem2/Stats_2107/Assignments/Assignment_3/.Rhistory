# Chunk 12
Y <- Rubber$loss
Y
# Chunk 13
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% Y
beta_hat
summary(rubber_lm)
# Chunk 14
eta <- X %*% beta_hat
head(eta)
# Chunk 15
n <- nrow(Rubber)
se <- sqrt(sum((Y - eta)^2) / (n - 3))
se
# Chunk 16
vcov(rubber_lm)
solve(t(X) %*% X) * se^2
setwd("~/Desktop/Uni Courses/2022_Adelaide_Uni/Stats_3001(Statistical_Modelling)/Practicals")
# pacman stands for package manager, "pacman::p_load()" function from pacman
# without actually loading pacman
pacman::p_load(tidyverse, gglm)
cat("\014") # clear the console
data(Rubber, package = "MASS")
head(Rubber)
# 1. Scatter-plot of loss against each of the other predictors
Rubber %>%
pivot_longer(-loss) %>%
ggplot(aes(value, loss)) +
geom_point() +
geom_smooth(method = lm) +
facet_wrap(~name, scales = "free") # this essentially splits the scatter-plot
# in terms of each name (hard and tens)
# 2. use lm to fit the multi-linear regression model
rubber_lm <- lm(loss ~ hard + tens, data = Rubber)
summary(rubber_lm)
# http://www.sthda.com/english/articles/39-regression-model-diagnostics/161-linear-regression-assumptions-and-diagnostics-in-r-essentials/
# Interpreting the output -
# 1. Coefficient of predictor - hard
#     - Keeping all other predictors constant. If you increase the hardness of
#       the rubber by 1 unit in Shore, then we can expect the abrasion loss of
#       the rubber to decrease 6.5708 grams on average.
# 2. Tens -
#     - Keeping all other predictors constant. If you increase the tensile strength
#       of the rubber by 1 kg per metre square, then we can expect the abrasion
#       loss of the rubber to decrease 1.3743 grams on average.
# Assumptions of the Multi linear regression model
# 1. Linearity - linear relationship between the response and predictor variable
#     - Residuals vs Fitted plot
#       - conditions for linearity :
#           - no pattern in the plot - random scatter above and below the plot
#           - the red line should be approximately at horizontal at the zero line
# 2. Heteroscedasticity - constant variance in the residuals (spread of data)
#     - Scale location plot
#       - conditions for heteroscedasticity :
#           - horizontal line with equally spread points - the variance of the
#             residuals points should be approximately constant along the
#             horizontal line. (no increasing or decreasing variance along the line)
# 3. Normality
#     - Normal Q-Q plot - residuals error are normally distributed
#       - conditions for Normality :
#           - residuals follow the straight line, no fanning of points at each
#             end of the line
# 4. Independence
#     -
plot(rubber_lm)
#     - The residuals are roughly randomly scattered above and below the line apart
#       from the slight curvature near the endpoints. Linearity assumption seems
#       reasonable.
# 2. Heteroscedasticity -
#     - In all three plots, the spread of the residuals seems to be about constant
#       around the line. So, constant variance assumption is reasonable.
# 3. Normality -
#     - Apart from the some slight departure of residuals from the line at the
#       lower end of the graph where they are more negative than what would be for
#       normally distributed points. The majority of the residuals are centered
#       around the middle of the line. So, the assumption of normality is reasonable.
# Prediction for loss for specific hardness and tensile strength
# hard = 50 and tens = 200, hard = 65 and tens = 190
newdata_1 <- tibble(
hard = c(50,65),
tens = c(65,190)
)
predict(rubber_lm, newdata_1) # We predict that the rubber will have a loss abrasion
# of 281.76 grams per hour for (hard=50, tens=200),
# 196.94 grams per hour for (hard=65, tens=190)
# 4. 95% CI and PI for the above newdata
predict(rubber_lm, newdata_1, interval = "prediction")
# We are 95% confident that the abrasion loss for a rubber with a hardness of 50
# units in Shore and tensile strength of 200 kg per square meter will be between
# 371.54 and 563.04 grams per hour.
predict(rubber_lm, newdata_1, interval = "confidence")
# We are 95% confident that the true mean of the abrasion loss for a rubber with
# a hardness of 50 and tensile strength of 200 kg per square meter will be between
# 407.6 and 529.98 grams per hour.
# 5. Design matrix of the multi linear model
X <- model.matrix(rubber_lm)
# 6. Assign the response variable loss to Y
Y <- Rubber$loss
# 7. Solve the least square estimate, B hat using the X and Y
B_hat <- solve(t(X) %*% X) %*% t(X) %*% Y
summary(rubber_lm)
## Yes the answers are the same as the one in lm()
# 8. Calculate the fitted values
fitted_val <- X %*% B_hat
head(fitted_val)
# 9. Calculate the residual variance
n <- nrow(Rubber)
residual_var <- sqrt((sum((Y - fitted_val)^2)) / (n - 3))
residual_var
vcov(rubber_lm)
evm <- solve(t(X) %*% X) * residual_var^2
evm
setwd("~/Desktop/Uni Courses/2022_Adelaide_Uni/Stats_3001(Statistical_Modelling)/Workshops/workshop_1")
clamsdtx <- read.delim("./ZuurData/Clams.txt")
clamsdtx
pacman::p_load(tidyverse, gglm, janitor)
clamsdtx <- janitor::clean_names(clamsdtx)
View(clamsdtx)
clams <- transmute(clamsdtx,
month = as.factor(month), length,
weight = afd,
log_length = lnlength,
log_afd = lnafd)
View(clams)
setwd("~/Desktop/Uni Courses/2022_Adelaide_Uni/Stats_3001(Statistical_Modelling)/Practicals")
pacman::p_load(tidyverse, gglm)
setwd("~/Desktop/Uni Courses/2021_Adelaide_Uni/sem_2/STATS_2107/Assignments/Assignment_3")
library(readr)
library(tidyverse)
library(infer)
Drill <- read_csv("Drill.csv")
##a) i) sample size n for each region
n_Antarctic <- filter(Drill, Drill$Region == "Antarctic") # 60
n_Pacific <- filter(Drill, Drill$Region == "Pacific") # 53
#ii) mean and standard deviation of drilling time(in hours) for drills in each region
mean_Antarctic <- mean(n_Antarctic$Time_hr)
sd_Antarctic <- sd(n_Antarctic$Time_hr)
mean_Pacific <- mean(n_Pacific$Time_hr)
sd_Pacific <- sd(n_Pacific$Time_hr)
#iii) which test is appropriate ?
# Answer : A non-pooled two sample t-test because the ratio of max(sd_Antarctic, sd_Pacific)/min(sd_Antarctic, sd_Pacific) > 2
#iv) Perform a Welch t-test using R, assuming 5% significance level, to test the hypothesis.
t_test_Antarctic_Pacific <- t.test(Drill$Time_hr ~ Drill$Region, data = Drill, alternative = "greater")
## Conclusion: Since the p-value is greater than the significance level of 5%, there is insufficient evidence to reject the null hypothesis.
##             Therefore, we can conclude that the drilling time of drills in the Pacific region is longer than those in the Antarctic region.
##b)
#i) A non-pooled 2 sample t-test (Welch t-test) between the mean drilling time of OzDrill(Antarctic) and AllDrill(Atlantic)
welch_t <- function(mu1, mu2, sd1, sd2, n1, n2){
t_stat <- (mu1-mu2)/sqrt((sd1^2/n1)+(sd2^2/n2))
welch_df <- ((sd1^2/n1)+(sd2^2/n2))^2/((sd1^4/(n1^2*(n1-1)))+(sd2^4/(n2^2*(n2-1))))
p_val <- 1-pt(t_stat,welch_df)
return(
tibble(t_statistic = t_stat,
DF = welch_df,
P = p_val)
)
}
t_test_Antarctic_Atlantic <- welch_t(mean_Antarctic, 25, sd_Antarctic, 2.14, 60, 38)
#ii) The value of test-statistic, degrees of freedom and P-value.
view(t_test_Antarctic_Atlantic)
#iii) Conclusion: Since the p-value is smaller than the significance level of 5%, we have sufficient evidence to reject the null hypothesis.
#                 Therefore, we can conclude that the driling time of drills in the Atlantic region is shorter than those in the Antarctic region.
#iv) Density Plot for the t-distribution with degrees of freedom obtained in ii)
# find the boundary value for alpha 0.05 at the right tail of the t-distribution
boundary_val <- qt(1-0.05, t_test_Antarctic_Atlantic$DF)
ggplot(tibble(x = c(-4,4)), aes(x=x)) +
geom_area(xlim=c(boundary_val,4), stat="function", fun=dt, args=list(df=t_test_Antarctic_Atlantic$DF),fill="#00998a") +
stat_function(fun=dt, args=list(df=t_test_Antarctic_Atlantic$DF)) + # creates the t-distribution density plot with DF=90.412..
geom_vline(xintercept = t_test_Antarctic_Atlantic$t_statistic, linetype="dashed", color="red") + # this line indicates where the t-statistic lies
labs(x = "T",title = "t-distribution(df=90.41287, alpha=0.05)") +
theme(plot.title =element_text(size=10, face="bold"), axis.title = element_text(size=rel(0.8))) # set the size and font for the title and axes' title
pnorm(1.77)
1-pnorm(1.77)
pacman::p_load(tidyverse, gglm, janitor)
clamsdtx <- read.delim("../ZuurData/ISIT.txt")
pacman::p_load(tidyverse, gglm, janitor)
ISIT_data <- read.delim("../ZuurData/ISIT.txt")
pacman::p_load(tidyverse, gglm, janitor)
ISIT_data <- read.delim("../ZuurData/ISIT.txt")
View(ISIT_data)
View(ISIT_data)
View(ISIT_data)
head(ISIT_data)
ISIT_data %>%
filter(Station == 1)
ISIT_data %>%
filter(Station == 1) %>%
ggplot(Source ~ SampleDepth) + geom_point() + geom_smooth(method = lm)
ISIT_data %>%
filter(Station == 1) %>%
ggplot(aes(Source ~ SampleDepth) + geom_point() + geom_smooth(method = lm)
ISIT_data %>%
filter(Station == 1) %>%
ggplot(aes(Source ~ SampleDepth)) + geom_point() + geom_smooth(method = lm)
ISIT_data %>%
filter(Station == 1) %>%
ggplot(aes(Sources ~ SampleDepth)) + geom_point() + geom_smooth(method = lm)
ISIT_data %>%
filter(Station == 1) %>%
ggplot(aes(Sources, SampleDepth)) + geom_point() + geom_smooth(method = lm)
ISIT_data %>%
ggplot(aes(Sources, SampleDepth)) + geom_point() + geom_smooth(method = lm) +
facet_wrap(~Station)
ISIT_data %>%
ggplot(aes(Sources, SampleDepth)) + geom_point() +
facet_wrap(~Station)
ISIT_data %>%
ggplot(aes(SampleDepth, Sources)) + geom_point() +
facet_wrap(~Station)
ISIT_data %>%
ggplot(aes(SampleDepth, Sources)) + geom_point() +
facet_wrap(~Station) + apatheme
pacman::p_load(tidyverse, gglm, janitor, apatheme)
ISIT_data <- read.delim("../ZuurData/ISIT.txt")
head(ISIT_data)
ISIT_data %>%
ggplot(aes(SampleDepth, Sources)) + geom_point() +
facet_wrap(~Station) + apatheme
ISIT_data %>%
ggplot(aes(SampleDepth, Sources)) + geom_point() +
facet_wrap(~Station) + apatheme
ISIT_data %>%
ggplot(aes(SampleDepth, Sources), color = Month) + geom_point() +
facet_wrap(~Station)
ISIT_data %>%
ggplot(aes(SampleDepth, Sources, color = Month)) + geom_point() +
facet_wrap(~Station)
ISIT_data %>%
ggplot(aes(SampleDepth, log(Sources), color = Month)) + geom_point() +
facet_wrap(~Station)
ISIT_data %>%
ggplot(aes(log(SampleDepth), log(Sources), color = Month)) + geom_point() +
facet_wrap(~Station)
tinytex::install_tinytex()
pacman::p_load(tidyverse)
pacman::p_load(tidyverse)
AFL2019 <- read_csv("AFL2019.csv")
View(AFL2019)
head(AFL2019)
View(AFL2019)
lapply(AFL2019, class)
AFL2019 <- data.frame(
i <- c(3,4)
AFL2019[ , i] <- apply(AFL2019[ , i], 2, function(x) as.factor(x)))
lapply(AFL2019, class)
AFL2019 <- data.frame(
i <- c(3,4)
AFL2019[ , i] <- apply(AFL2019[ , i], 2, function(x) as.factor(x)))
lapply(AFL2019, class)
i <- c(3,4)
AFL2019[ , i] <- apply(AFL2019[ , i], 2, function(x) as.factor(x))
View(AFL2019)
sapply(AFL2019, class)
sapply(AFL2019, class)
AFL2019$Home.Team <- as.factor(AFL2019$Home.Team)
AFL2019$Away.Team <- as.factor(AFL2019$Away.Team)
sapply(AFL2019, class)
AFL2019$Home.Team <- as.factor(AFL2019$Home.Team)
AFL2019$Away.Team <- as.factor(AFL2019$Away.Team)
sapply(AFL2019, class)
sapply(AFL2019, class)
AFL2019$Home.Team <- as.factor(AFL2019$Home.Team)
AFL2019$Away.Team <- as.factor(AFL2019$Away.Team)
View(AFL2019)
View(AFL2019)
AFL2019$Home.Team
AFL2019$Away.Team
knitr::opts_chunk$set(echo = T, results = "hide")
AFL2019 %>%
select(Home.Team, Away.Team) %>%
mutate(difference = Home.Team - Away.Team)
AFL2019 %>%
mutate(difference = Home.Team - Away.Team)
AFL2019 %>%
mutate(difference = Home.Team - Away.Team)
AFL2019 %>%
mutate(difference = (AFL2019$Home.Team - AFL2019$Away.Team))
AFL2019 %>%
mutate(difference = Home.Score - Away.Score)
AFL2019 %>%
mutate(difference = Home.Score - Away.Score)
AFL2019 %>%
mutate(difference = Home.Score - Away.Score)
glimpse(AFL2019)
AFL2019 %>%
mutate(difference = Home.Score - Away.Score)
head(AFL2019$difference)
AFL2019 %>%
mutate(Difference = Home.Score - Away.Score)
head(AFL2019$Difference)
AFL2019 %>%
mutate(Difference = Home.Score - Away.Score)
head(AFL2019$Home.Score)
AFL2019 %>%
mutate(Difference = Home.Score - Away.Score)
head(AFL2019$Difference)
AFL2019 <- mutate(Difference = Home.Score - Away.Score)
AFL2019 <- AFL2019 %>%
mutate(Difference = Home.Score - Away.Score)
head(AFL2019$Difference)
AFL_lm <- lm(Difference ~ Home.Team + Away.Team, data = AFL2019)
summary(AFL_lm)
sapply(AFL2019, class)
AFL2019$Home.Team <- as.factor(AFL2019$Home.Team)
AFL2019$Away.Team <- as.factor(AFL2019$Away.Team)
AFL2019$Home.Team
AFL2019$Away.Team
sapply(AFL2019, class)
AFL2019$Home.Team <- as.factor(AFL2019$Home.Team)
AFL2019$Away.Team <- as.factor(AFL2019$Away.Team)
summary(AFL2019$Home.Team)
AFL2019$Away.Team
sapply(AFL2019, class)
AFL2019$Home.Team <- as.factor(AFL2019$Home.Team)
AFL2019$Away.Team <- as.factor(AFL2019$Away.Team)
summary(AFL2019$Home.Team)
summary(AFL2019$Away.Team)
summary(AFL2019$Home.Team)
summary(AFL2019$Away.Team)
X <- model.matrix(~Home.Team + Away.Team, data = AFL2019)
View(X)
X <- model.matrix(~Home.Team + Away.Team - 1, data = AFL2019)
View(X)
X <- model.matrix(-1~Home.Team + Away.Team, data = AFL2019)
X <- model.matrix(~(Home.Team + Away.Team) + 0, data = AFL2019)
View(X)
X <- model.matrix(~(Home.Team + Away.Team), data = AFL2019)
View(X)
X <- model.matrix(~(Home.Team + Away.Team) + 0, data = AFL2019)
AFL2019_lm <- lm(Difference - 0 ~ Home.Team + Away.Team, data = AFL2019 )
summary(AFL2019_lm)
AFL2019_lm <- lm(Difference ~ 0 + Home.Team + Away.Team, data = AFL2019 )
summary(AFL2019_lm)
View(X)
AFL2019_lm <- lm(Difference ~ Home.Team + Away.Team, data = AFL2019 )
summary(AFL2019_lm)
y <- AFL2019$Difference
AFL2019_lm <- lm(y ~ X, data = AFL2019 )
summary(AFL2019_lm)
X <- model.matrix(~Home.Team + Away.Team, data = AFL2019)
y <- AFL2019$Difference
AFL2019_lm <- lm(y ~ X, data = AFL2019 )
summary(AFL2019_lm)
y <- AFL2019$Difference
AFL2019_lm <- lm(y ~ X)
summary(AFL2019_lm)
X <- model.matrix(~(Home.Team + Away.Team) + 0, data = AFL2019)
y <- AFL2019$Difference
AFL2019_lm <- lm(y ~ X)
summary(AFL2019_lm)
X <- model.matrix(~ 0 +(Home.Team + Away.Team), data = AFL2019)
View(X)
y <- AFL2019$Difference
AFL2019_lm <- lm(y ~ X)
summary(AFL2019_lm)
y <- AFL2019$Difference
y
y <- AFL2019$Difference
AFL2019_lm <- lm(y ~ 0 + X)
summary(AFL2019_lm)
y <- AFL2019$Difference
AFL2019_lm <- lm(y ~ X)
summary(AFL2019_lm)
y <- AFL2019$Difference
AFL2019_lm <- lm(y ~ X)
summary(AFL2019_lm)
sapply(AFL2019, class)
AFL2019$Home.Team <- as.factor(AFL2019$Home.Team)
AFL2019$Away.Team <- as.factor(AFL2019$Away.Team)
summary(AFL2019$Home.Team)
summary(AFL2019$Away.Team)
X <- model.matrix(~ 0 +(Home.Team + Away.Team), data = AFL2019)
head(X)
X <- model.matrix(~ 0 +(Home.Team + Away.Team), data = AFL2019)
X
X <- model.matrix(~ 0 +(Home.Team + Away.Team), data = AFL2019)
X[1:10,]
X_1 <- AFL2019$Home.Team
X_2 <- AFL2019$Away.Team
X <- X_1 - X_2
X <- (X_1 - X_2)
X_1 <- AFL2019$Home.Team
X_2 <- AFL2019$Away.Team
X <- (X_1 - X_2)
X_1 <- AFL2019$Home.Team
X_2 <- AFL2019$Away.Team
X <- (X_1 - X_2)
X_1 <- model.matrix(AFL2019$Home.Team)
X_1 <- model.matrix(~ Home.Team, data = AFL2019)
X_2 <- model.matrix(~ Away.Team, data = AFL2019)
X <- (X_1 - X_2)
View(X)
y <- AFL2019$Difference
AFL2019_lm <- lm(y ~ X)
summary(AFL2019_lm)
y <- AFL2019$Difference
AFL2019_lm <- lm(y ~ 0 + X)
summary(AFL2019_lm)
View(X)
View(X)
View(X)
View(X)
View(X)
X <- subset(X, select = -c(intercept))
X <- subset(X, select = -c(1))
View(X)
y <- AFL2019$Difference
AFL2019_lm <- lm(y ~ X)
summary(AFL2019_lm)
View(X_1)
plot(AFL2019_lm, which = 1)
plot(AFL2019_lm, which = 2)
pacman::p_load(tinytex, cowplot)
plot_grid(plot_1, plot_2)
y <- AFL2019$Difference
AFL2019_lm <- lm(y ~ X)
summary(AFL2019_lm)
plot_1 <- plot(AFL2019_lm, which = 1)
plot_2 <- plot(AFL2019_lm, which = 2)
plot_grid(plot_1, plot_2)
y <- AFL2019$Difference
AFL2019_lm <- lm(y ~ X)
summary(AFL2019_lm)
plot_1 <- plot(AFL2019_lm, which = 1)
plot_2 <- plot(AFL2019_lm, which = 2)
plot_grid(plot_1, plot_2, labels = "AUTO")
pacman::p_load(tinytex, cowplot, gridExtra)
y <- AFL2019$Difference
AFL2019_lm <- lm(y ~ X)
summary(AFL2019_lm)
plot_1 <- plot(AFL2019_lm, which = 1)
plot_2 <- plot(AFL2019_lm, which = 2)
grid.arrange(plot_1, plot_2, ncol = 2)
grid.arrange(plot_1, plot_2, ncol = 2)
y <- AFL2019$Difference
AFL2019_lm <- lm(y ~ X)
summary(AFL2019_lm)
plot_1 <- plot(AFL2019_lm, which = 1)
plot_2 <- plot(AFL2019_lm, which = 2)
par(mfrow=c(1,2))
y <- AFL2019$Difference
AFL2019_lm <- lm(y ~ X)
summary(AFL2019_lm)
par(mfrow=c(1,2))
plot(AFL2019_lm, which = 1)
plot(AFL2019_lm, which = 2)
y <- AFL2019$Difference
AFL2019_lm <- lm(y ~ X)
summary(AFL2019_lm)
par(mfrow=c(2,1))
plot(AFL2019_lm, which = 1)
plot(AFL2019_lm, which = 2)
y <- AFL2019$Difference
AFL2019_lm <- lm(y ~ X)
summary(AFL2019_lm)
plot(AFL2019_lm, which = 1)
plot(AFL2019_lm, which = 2)
y <- AFL2019$Difference
AFL2019_lm <- lm(y ~ X)
summary(AFL2019_lm)
plot(AFL2019_lm, which = 1) + labs(caption = "Residuals vs Fitted plot")
p_1 <- plot(AFL2019_lm, which = 1) + labs(caption = "Residuals vs Fitted plot")
p_1 <- plot(AFL2019_lm, which = 1) + theme(caption = "Residuals vs Fitted plot")
p_1 <- plot(AFL2019_lm, which = 1) + theme(plot.caption = "Residuals vs Fitted plot")
p_1 <- plot(AFL2019_lm, which = 1) + theme(plot.title = "Residuals vs Fitted plot")
p_1 <- plot(AFL2019_lm, which = 1, main = "Residuals vs Fitted plot for the ")
p_1 <- plot(AFL2019_lm, which = 1, main = "Residuals vs Fitted plot for the ", sub.caption = FALSE)
p_1 <- plot(AFL2019_lm, which = 1, main = "Residuals vs Fitted plot for the ", sub.caption = "FALSE")
p_1 <- plot(AFL2019_lm, which = 1, main = "Residuals vs Fitted plot for the ", sub = "FALSE")
p_1 <- plot(AFL2019_lm, which = 1, main = "Residuals vs Fitted plot for the ", sub = "")
p_1 <- plot(AFL2019_lm, which = 1)
p_2 <- plot(AFL2019_lm, which = 2)
plot(AFL2019_lm, which=5)
plot(AFL2019_lm, which=5, xlim(0.8, 1))
plot(AFL2019_lm, which=5)
summary(AFL2019_lm)
estimated_coefficient <- coef(AFL2019_lm)
estimated_coefficient
summary(AFL2019_lm)
summary(AFL2019_lm)
View(AFL2019)
Brisbane_lion_vs_Carlton <- AFL2019 %>%
filter(Home.Team == "Brisbane Lions", Away.Team == "Carlton")
View(Brisbane_lion_vs_Carlton)
View(AFL2019)
Brisbane_lion_vs_Carlton <- AFL2019 %>%
filter(Home.Team == "Brisbane Lions")
View(Brisbane_lion_vs_Carlton)
predict(AFL2019_lm, newdata)
newdata <- tibble(
Brisbane_Lions = 1,
Carlton = 1
)
predict(AFL2019_lm, newdata)
newdata <- tibble(
x = c(1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
)
predict(AFL2019_lm, newdata, interval = "prediction")
newdata <- tibble(
Home.Team = "Brisbane Lions",
Away.Team = "Carlton"
)
predict(AFL2019_lm, newdata, interval = "prediction")
newdata <- tibble(
Home.Team = "Brisbane Lions",
Away.Team = "Carlton"
)
predict(AFL2019_lm, newdata, interval = "prediction")
summary(AFL2019_lm)
expected_num_of_points <- 3.682 + 12.892 - (-14.758)
expected_num_of_points <- ceil(3.682 + 12.892 - (-14.758))
expected_num_of_points <- ceiling(3.682 + 12.892 - (-14.758))
